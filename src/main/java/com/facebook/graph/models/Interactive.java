/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.facebook.graph.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Interactive type.
 */
public class Interactive {
    private Action action;
    private Body body;
    private Footer footer;
    private Header header;
    private InteractiveTypeEnum type;

    /**
     * Default constructor.
     */
    public Interactive() {
    }

    /**
     * Initialization constructor.
     * @param  action  Action value for action.
     * @param  body  Body value for body.
     * @param  type  InteractiveTypeEnum value for type.
     * @param  footer  Footer value for footer.
     * @param  header  Header value for header.
     */
    public Interactive(
            Action action,
            Body body,
            InteractiveTypeEnum type,
            Footer footer,
            Header header) {
        this.action = action;
        this.body = body;
        this.footer = footer;
        this.header = header;
        this.type = type;
    }

    /**
     * Getter for Action.
     * Action you want the user to perform after reading the message.
     * @return Returns the Action
     */
    @JsonGetter("action")
    public Action getAction() {
        return action;
    }

    /**
     * Setter for Action.
     * Action you want the user to perform after reading the message.
     * @param action Value for Action
     */
    @JsonSetter("action")
    public void setAction(Action action) {
        this.action = action;
    }

    /**
     * Getter for Body.
     * The body of the message. Emojis and markdown are supported.
     * @return Returns the Body
     */
    @JsonGetter("body")
    public Body getBody() {
        return body;
    }

    /**
     * Setter for Body.
     * The body of the message. Emojis and markdown are supported.
     * @param body Value for Body
     */
    @JsonSetter("body")
    public void setBody(Body body) {
        this.body = body;
    }

    /**
     * Getter for Footer.
     * The footer of the message. Emojis and markdown are supported.
     * @return Returns the Footer
     */
    @JsonGetter("footer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Footer getFooter() {
        return footer;
    }

    /**
     * Setter for Footer.
     * The footer of the message. Emojis and markdown are supported.
     * @param footer Value for Footer
     */
    @JsonSetter("footer")
    public void setFooter(Footer footer) {
        this.footer = footer;
    }

    /**
     * Getter for Header.
     * Header content displayed on top of a message.
     * @return Returns the Header
     */
    @JsonGetter("header")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Header getHeader() {
        return header;
    }

    /**
     * Setter for Header.
     * Header content displayed on top of a message.
     * @param header Value for Header
     */
    @JsonSetter("header")
    public void setHeader(Header header) {
        this.header = header;
    }

    /**
     * Getter for Type.
     * The type of interactive message you want to send.
     * @return Returns the InteractiveTypeEnum
     */
    @JsonGetter("type")
    public InteractiveTypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The type of interactive message you want to send.
     * @param type Value for InteractiveTypeEnum
     */
    @JsonSetter("type")
    public void setType(InteractiveTypeEnum type) {
        this.type = type;
    }

    /**
     * Converts this Interactive into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Interactive [" + "action=" + action + ", body=" + body + ", type=" + type
                + ", footer=" + footer + ", header=" + header + "]";
    }

    /**
     * Builds a new {@link Interactive.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Interactive.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(action, body, type)
                .footer(getFooter())
                .header(getHeader());
        return builder;
    }

    /**
     * Class to build instances of {@link Interactive}.
     */
    public static class Builder {
        private Action action;
        private Body body;
        private InteractiveTypeEnum type;
        private Footer footer;
        private Header header;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  action  Action value for action.
         * @param  body  Body value for body.
         * @param  type  InteractiveTypeEnum value for type.
         */
        public Builder(Action action, Body body, InteractiveTypeEnum type) {
            this.action = action;
            this.body = body;
            this.type = type;
        }

        /**
         * Setter for action.
         * @param  action  Action value for action.
         * @return Builder
         */
        public Builder action(Action action) {
            this.action = action;
            return this;
        }

        /**
         * Setter for body.
         * @param  body  Body value for body.
         * @return Builder
         */
        public Builder body(Body body) {
            this.body = body;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  InteractiveTypeEnum value for type.
         * @return Builder
         */
        public Builder type(InteractiveTypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for footer.
         * @param  footer  Footer value for footer.
         * @return Builder
         */
        public Builder footer(Footer footer) {
            this.footer = footer;
            return this;
        }

        /**
         * Setter for header.
         * @param  header  Header value for header.
         * @return Builder
         */
        public Builder header(Header header) {
            this.header = header;
            return this;
        }

        /**
         * Builds a new {@link Interactive} object using the set fields.
         * @return {@link Interactive}
         */
        public Interactive build() {
            return new Interactive(action, body, type, footer, header);
        }
    }
}
