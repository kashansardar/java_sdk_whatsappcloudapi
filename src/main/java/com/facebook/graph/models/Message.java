/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.facebook.graph.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Message type.
 */
public class Message {
    private Audio audio;
    private List<Contact> contacts;
    private Document document;
    private Image image;
    private Interactive interactive;
    private Location location;
    private String messagingProduct;
    private String recipientType;
    private Sticker sticker;
    private Template template;
    private Text text;
    private String to;
    private MessageTypeEnum type;
    private Video video;

    /**
     * Default constructor.
     */
    public Message() {
        recipientType = "individual";
    }

    /**
     * Initialization constructor.
     * @param  messagingProduct  String value for messagingProduct.
     * @param  to  String value for to.
     * @param  audio  Audio value for audio.
     * @param  contacts  List of Contact value for contacts.
     * @param  document  Document value for document.
     * @param  image  Image value for image.
     * @param  interactive  Interactive value for interactive.
     * @param  location  Location value for location.
     * @param  recipientType  String value for recipientType.
     * @param  sticker  Sticker value for sticker.
     * @param  template  Template value for template.
     * @param  text  Text value for text.
     * @param  type  MessageTypeEnum value for type.
     * @param  video  Video value for video.
     */
    public Message(
            String messagingProduct,
            String to,
            Audio audio,
            List<Contact> contacts,
            Document document,
            Image image,
            Interactive interactive,
            Location location,
            String recipientType,
            Sticker sticker,
            Template template,
            Text text,
            MessageTypeEnum type,
            Video video) {
        this.audio = audio;
        this.contacts = contacts;
        this.document = document;
        this.image = image;
        this.interactive = interactive;
        this.location = location;
        this.messagingProduct = messagingProduct;
        this.recipientType = recipientType;
        this.sticker = sticker;
        this.template = template;
        this.text = text;
        this.to = to;
        this.type = type;
        this.video = video;
    }

    /**
     * Getter for Audio.
     * A media object containing audio. Required when type=audio.
     * @return Returns the Audio
     */
    @JsonGetter("audio")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Audio getAudio() {
        return audio;
    }

    /**
     * Setter for Audio.
     * A media object containing audio. Required when type=audio.
     * @param audio Value for Audio
     */
    @JsonSetter("audio")
    public void setAudio(Audio audio) {
        this.audio = audio;
    }

    /**
     * Getter for Contacts.
     * A contact object. Required when type=contacts.
     * @return Returns the List of Contact
     */
    @JsonGetter("contacts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Contact> getContacts() {
        return contacts;
    }

    /**
     * Setter for Contacts.
     * A contact object. Required when type=contacts.
     * @param contacts Value for List of Contact
     */
    @JsonSetter("contacts")
    public void setContacts(List<Contact> contacts) {
        this.contacts = contacts;
    }

    /**
     * Getter for Document.
     * A media object containing a document. Required when type=document.
     * @return Returns the Document
     */
    @JsonGetter("document")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Document getDocument() {
        return document;
    }

    /**
     * Setter for Document.
     * A media object containing a document. Required when type=document.
     * @param document Value for Document
     */
    @JsonSetter("document")
    public void setDocument(Document document) {
        this.document = document;
    }

    /**
     * Getter for Image.
     * A media object containing an image. Required when type=image.
     * @return Returns the Image
     */
    @JsonGetter("image")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Image getImage() {
        return image;
    }

    /**
     * Setter for Image.
     * A media object containing an image. Required when type=image.
     * @param image Value for Image
     */
    @JsonSetter("image")
    public void setImage(Image image) {
        this.image = image;
    }

    /**
     * Getter for Interactive.
     * This option is used to send List Messages and Reply Buttons. The components of each
     * interactive object generally follow a consistent pattern: header, body, footer, and action.
     * Required when type=interactive.
     * @return Returns the Interactive
     */
    @JsonGetter("interactive")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Interactive getInteractive() {
        return interactive;
    }

    /**
     * Setter for Interactive.
     * This option is used to send List Messages and Reply Buttons. The components of each
     * interactive object generally follow a consistent pattern: header, body, footer, and action.
     * Required when type=interactive.
     * @param interactive Value for Interactive
     */
    @JsonSetter("interactive")
    public void setInteractive(Interactive interactive) {
        this.interactive = interactive;
    }

    /**
     * Getter for Location.
     * A location object. Required when type=location.
     * @return Returns the Location
     */
    @JsonGetter("location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Location getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * A location object. Required when type=location.
     * @param location Value for Location
     */
    @JsonSetter("location")
    public void setLocation(Location location) {
        this.location = location;
    }

    /**
     * Getter for MessagingProduct.
     * Messaging service used for the request.
     * @return Returns the String
     */
    @JsonGetter("messaging_product")
    public String getMessagingProduct() {
        return messagingProduct;
    }

    /**
     * Setter for MessagingProduct.
     * Messaging service used for the request.
     * @param messagingProduct Value for String
     */
    @JsonSetter("messaging_product")
    public void setMessagingProduct(String messagingProduct) {
        this.messagingProduct = messagingProduct;
    }

    /**
     * Getter for RecipientType.
     * Currently, you can only send messages to individuals.
     * @return Returns the String
     */
    @JsonGetter("recipient_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRecipientType() {
        return recipientType;
    }

    /**
     * Setter for RecipientType.
     * Currently, you can only send messages to individuals.
     * @param recipientType Value for String
     */
    @JsonSetter("recipient_type")
    public void setRecipientType(String recipientType) {
        this.recipientType = recipientType;
    }

    /**
     * Getter for Sticker.
     * A media object containing a sticker. Currently, we support inbound both and outbound
     * stickers: For outbound, we only support static third-party stickers. For inbound, we support
     * all types of stickers. The sticker needs to be 512x512 pixels and the file’s size needs to be
     * less than 100 KB. Required when type=sticker.
     * @return Returns the Sticker
     */
    @JsonGetter("sticker")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Sticker getSticker() {
        return sticker;
    }

    /**
     * Setter for Sticker.
     * A media object containing a sticker. Currently, we support inbound both and outbound
     * stickers: For outbound, we only support static third-party stickers. For inbound, we support
     * all types of stickers. The sticker needs to be 512x512 pixels and the file’s size needs to be
     * less than 100 KB. Required when type=sticker.
     * @param sticker Value for Sticker
     */
    @JsonSetter("sticker")
    public void setSticker(Sticker sticker) {
        this.sticker = sticker;
    }

    /**
     * Getter for Template.
     * A template object. Required when type=template.
     * @return Returns the Template
     */
    @JsonGetter("template")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Template getTemplate() {
        return template;
    }

    /**
     * Setter for Template.
     * A template object. Required when type=template.
     * @param template Value for Template
     */
    @JsonSetter("template")
    public void setTemplate(Template template) {
        this.template = template;
    }

    /**
     * Getter for Text.
     * Required for text messages.
     * @return Returns the Text
     */
    @JsonGetter("text")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Text getText() {
        return text;
    }

    /**
     * Setter for Text.
     * Required for text messages.
     * @param text Value for Text
     */
    @JsonSetter("text")
    public void setText(Text text) {
        this.text = text;
    }

    /**
     * Getter for To.
     * WhatsApp ID or phone number for the person you want to send a message to.
     * @return Returns the String
     */
    @JsonGetter("to")
    public String getTo() {
        return to;
    }

    /**
     * Setter for To.
     * WhatsApp ID or phone number for the person you want to send a message to.
     * @param to Value for String
     */
    @JsonSetter("to")
    public void setTo(String to) {
        this.to = to;
    }

    /**
     * Getter for Type.
     * The type of message you want to send.
     * @return Returns the MessageTypeEnum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MessageTypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The type of message you want to send.
     * @param type Value for MessageTypeEnum
     */
    @JsonSetter("type")
    public void setType(MessageTypeEnum type) {
        this.type = type;
    }

    /**
     * Getter for Video.
     * A media object containing a video. Required when type=video.
     * @return Returns the Video
     */
    @JsonGetter("video")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Video getVideo() {
        return video;
    }

    /**
     * Setter for Video.
     * A media object containing a video. Required when type=video.
     * @param video Value for Video
     */
    @JsonSetter("video")
    public void setVideo(Video video) {
        this.video = video;
    }

    /**
     * Converts this Message into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Message [" + "messagingProduct=" + messagingProduct + ", to=" + to + ", audio="
                + audio + ", contacts=" + contacts + ", document=" + document + ", image=" + image
                + ", interactive=" + interactive + ", location=" + location + ", recipientType="
                + recipientType + ", sticker=" + sticker + ", template=" + template + ", text="
                + text + ", type=" + type + ", video=" + video + "]";
    }

    /**
     * Builds a new {@link Message.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Message.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(messagingProduct, to)
                .audio(getAudio())
                .contacts(getContacts())
                .document(getDocument())
                .image(getImage())
                .interactive(getInteractive())
                .location(getLocation())
                .recipientType(getRecipientType())
                .sticker(getSticker())
                .template(getTemplate())
                .text(getText())
                .type(getType())
                .video(getVideo());
        return builder;
    }

    /**
     * Class to build instances of {@link Message}.
     */
    public static class Builder {
        private String messagingProduct;
        private String to;
        private Audio audio;
        private List<Contact> contacts;
        private Document document;
        private Image image;
        private Interactive interactive;
        private Location location;
        private String recipientType = "individual";
        private Sticker sticker;
        private Template template;
        private Text text;
        private MessageTypeEnum type;
        private Video video;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  messagingProduct  String value for messagingProduct.
         * @param  to  String value for to.
         */
        public Builder(String messagingProduct, String to) {
            this.messagingProduct = messagingProduct;
            this.to = to;
        }

        /**
         * Setter for messagingProduct.
         * @param  messagingProduct  String value for messagingProduct.
         * @return Builder
         */
        public Builder messagingProduct(String messagingProduct) {
            this.messagingProduct = messagingProduct;
            return this;
        }

        /**
         * Setter for to.
         * @param  to  String value for to.
         * @return Builder
         */
        public Builder to(String to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for audio.
         * @param  audio  Audio value for audio.
         * @return Builder
         */
        public Builder audio(Audio audio) {
            this.audio = audio;
            return this;
        }

        /**
         * Setter for contacts.
         * @param  contacts  List of Contact value for contacts.
         * @return Builder
         */
        public Builder contacts(List<Contact> contacts) {
            this.contacts = contacts;
            return this;
        }

        /**
         * Setter for document.
         * @param  document  Document value for document.
         * @return Builder
         */
        public Builder document(Document document) {
            this.document = document;
            return this;
        }

        /**
         * Setter for image.
         * @param  image  Image value for image.
         * @return Builder
         */
        public Builder image(Image image) {
            this.image = image;
            return this;
        }

        /**
         * Setter for interactive.
         * @param  interactive  Interactive value for interactive.
         * @return Builder
         */
        public Builder interactive(Interactive interactive) {
            this.interactive = interactive;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  Location value for location.
         * @return Builder
         */
        public Builder location(Location location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for recipientType.
         * @param  recipientType  String value for recipientType.
         * @return Builder
         */
        public Builder recipientType(String recipientType) {
            this.recipientType = recipientType;
            return this;
        }

        /**
         * Setter for sticker.
         * @param  sticker  Sticker value for sticker.
         * @return Builder
         */
        public Builder sticker(Sticker sticker) {
            this.sticker = sticker;
            return this;
        }

        /**
         * Setter for template.
         * @param  template  Template value for template.
         * @return Builder
         */
        public Builder template(Template template) {
            this.template = template;
            return this;
        }

        /**
         * Setter for text.
         * @param  text  Text value for text.
         * @return Builder
         */
        public Builder text(Text text) {
            this.text = text;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  MessageTypeEnum value for type.
         * @return Builder
         */
        public Builder type(MessageTypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for video.
         * @param  video  Video value for video.
         * @return Builder
         */
        public Builder video(Video video) {
            this.video = video;
            return this;
        }

        /**
         * Builds a new {@link Message} object using the set fields.
         * @return {@link Message}
         */
        public Message build() {
            return new Message(messagingProduct, to, audio, contacts, document, image, interactive,
                    location, recipientType, sticker, template, text, type, video);
        }
    }
}
