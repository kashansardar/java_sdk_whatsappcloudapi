/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.facebook.graph.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Contact type.
 */
public class Contact {
    private List<Address> addresses;
    private String birthday;
    private List<EmailObject> emails;
    private Name name;
    private Org org;
    private List<PhoneObject> phones;
    private List<UrlObject> urls;

    /**
     * Default constructor.
     */
    public Contact() {
        birthday = "YYYY-MM-DD formatted string.";
    }

    /**
     * Initialization constructor.
     * @param  name  Name value for name.
     * @param  addresses  List of Address value for addresses.
     * @param  birthday  String value for birthday.
     * @param  emails  List of EmailObject value for emails.
     * @param  org  Org value for org.
     * @param  phones  List of PhoneObject value for phones.
     * @param  urls  List of UrlObject value for urls.
     */
    public Contact(
            Name name,
            List<Address> addresses,
            String birthday,
            List<EmailObject> emails,
            Org org,
            List<PhoneObject> phones,
            List<UrlObject> urls) {
        this.addresses = addresses;
        this.birthday = birthday;
        this.emails = emails;
        this.name = name;
        this.org = org;
        this.phones = phones;
        this.urls = urls;
    }

    /**
     * Getter for Addresses.
     * Full contact address(es)
     * @return Returns the List of Address
     */
    @JsonGetter("addresses")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Address> getAddresses() {
        return addresses;
    }

    /**
     * Setter for Addresses.
     * Full contact address(es)
     * @param addresses Value for List of Address
     */
    @JsonSetter("addresses")
    public void setAddresses(List<Address> addresses) {
        this.addresses = addresses;
    }

    /**
     * Getter for Birthday.
     * @return Returns the String
     */
    @JsonGetter("birthday")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBirthday() {
        return birthday;
    }

    /**
     * Setter for Birthday.
     * @param birthday Value for String
     */
    @JsonSetter("birthday")
    public void setBirthday(String birthday) {
        this.birthday = birthday;
    }

    /**
     * Getter for Emails.
     * Contact email address(es)
     * @return Returns the List of EmailObject
     */
    @JsonGetter("emails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<EmailObject> getEmails() {
        return emails;
    }

    /**
     * Setter for Emails.
     * Contact email address(es)
     * @param emails Value for List of EmailObject
     */
    @JsonSetter("emails")
    public void setEmails(List<EmailObject> emails) {
        this.emails = emails;
    }

    /**
     * Getter for Name.
     * Full contact name
     * @return Returns the Name
     */
    @JsonGetter("name")
    public Name getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Full contact name
     * @param name Value for Name
     */
    @JsonSetter("name")
    public void setName(Name name) {
        this.name = name;
    }

    /**
     * Getter for Org.
     * Contact organization information
     * @return Returns the Org
     */
    @JsonGetter("org")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Org getOrg() {
        return org;
    }

    /**
     * Setter for Org.
     * Contact organization information
     * @param org Value for Org
     */
    @JsonSetter("org")
    public void setOrg(Org org) {
        this.org = org;
    }

    /**
     * Getter for Phones.
     * Contact phone number(s)
     * @return Returns the List of PhoneObject
     */
    @JsonGetter("phones")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<PhoneObject> getPhones() {
        return phones;
    }

    /**
     * Setter for Phones.
     * Contact phone number(s)
     * @param phones Value for List of PhoneObject
     */
    @JsonSetter("phones")
    public void setPhones(List<PhoneObject> phones) {
        this.phones = phones;
    }

    /**
     * Getter for Urls.
     * Contact URL(s)
     * @return Returns the List of UrlObject
     */
    @JsonGetter("urls")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<UrlObject> getUrls() {
        return urls;
    }

    /**
     * Setter for Urls.
     * Contact URL(s)
     * @param urls Value for List of UrlObject
     */
    @JsonSetter("urls")
    public void setUrls(List<UrlObject> urls) {
        this.urls = urls;
    }

    /**
     * Converts this Contact into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Contact [" + "name=" + name + ", addresses=" + addresses + ", birthday=" + birthday
                + ", emails=" + emails + ", org=" + org + ", phones=" + phones + ", urls=" + urls
                + "]";
    }

    /**
     * Builds a new {@link Contact.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Contact.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name)
                .addresses(getAddresses())
                .birthday(getBirthday())
                .emails(getEmails())
                .org(getOrg())
                .phones(getPhones())
                .urls(getUrls());
        return builder;
    }

    /**
     * Class to build instances of {@link Contact}.
     */
    public static class Builder {
        private Name name;
        private List<Address> addresses;
        private String birthday = "YYYY-MM-DD formatted string.";
        private List<EmailObject> emails;
        private Org org;
        private List<PhoneObject> phones;
        private List<UrlObject> urls;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  Name value for name.
         */
        public Builder(Name name) {
            this.name = name;
        }

        /**
         * Setter for name.
         * @param  name  Name value for name.
         * @return Builder
         */
        public Builder name(Name name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for addresses.
         * @param  addresses  List of Address value for addresses.
         * @return Builder
         */
        public Builder addresses(List<Address> addresses) {
            this.addresses = addresses;
            return this;
        }

        /**
         * Setter for birthday.
         * @param  birthday  String value for birthday.
         * @return Builder
         */
        public Builder birthday(String birthday) {
            this.birthday = birthday;
            return this;
        }

        /**
         * Setter for emails.
         * @param  emails  List of EmailObject value for emails.
         * @return Builder
         */
        public Builder emails(List<EmailObject> emails) {
            this.emails = emails;
            return this;
        }

        /**
         * Setter for org.
         * @param  org  Org value for org.
         * @return Builder
         */
        public Builder org(Org org) {
            this.org = org;
            return this;
        }

        /**
         * Setter for phones.
         * @param  phones  List of PhoneObject value for phones.
         * @return Builder
         */
        public Builder phones(List<PhoneObject> phones) {
            this.phones = phones;
            return this;
        }

        /**
         * Setter for urls.
         * @param  urls  List of UrlObject value for urls.
         * @return Builder
         */
        public Builder urls(List<UrlObject> urls) {
            this.urls = urls;
            return this;
        }

        /**
         * Builds a new {@link Contact} object using the set fields.
         * @return {@link Contact}
         */
        public Contact build() {
            return new Contact(name, addresses, birthday, emails, org, phones, urls);
        }
    }
}
