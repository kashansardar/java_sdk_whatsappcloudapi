/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.facebook.graph.controllers;

import com.facebook.graph.ApiHelper;
import com.facebook.graph.AuthManager;
import com.facebook.graph.Configuration;
import com.facebook.graph.exceptions.ApiException;
import com.facebook.graph.http.Headers;
import com.facebook.graph.http.client.HttpClient;
import com.facebook.graph.http.client.HttpContext;
import com.facebook.graph.http.request.HttpRequest;
import com.facebook.graph.http.response.HttpResponse;
import com.facebook.graph.http.response.HttpStringResponse;
import com.facebook.graph.models.MarkMessageAsReadRequest;
import com.facebook.graph.models.Message;
import com.facebook.graph.models.SendMessageResponse;
import com.facebook.graph.models.SuccessResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MessagesController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public MessagesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Use this endpoint to send text messages, media, message templates to your customers.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  body  Required parameter: To send a message, you must first assemble a message object
     *         with the content you want to send.
     * @return    Returns the SendMessageResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SendMessageResponse sendMessage(
            final String phoneNumberID,
            final Message body) throws ApiException, IOException {
        HttpRequest request = buildSendMessageRequest(phoneNumberID, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSendMessageResponse(context);
    }

    /**
     * Use this endpoint to send text messages, media, message templates to your customers.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  body  Required parameter: To send a message, you must first assemble a message object
     *         with the content you want to send.
     * @return    Returns the SendMessageResponse response from the API call
     */
    public CompletableFuture<SendMessageResponse> sendMessageAsync(
            final String phoneNumberID,
            final Message body) {
        return makeHttpCallAsync(() -> buildSendMessageRequest(phoneNumberID, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleSendMessageResponse(context));
    }

    /**
     * Builds the HttpRequest object for sendMessage.
     */
    private HttpRequest buildSendMessageRequest(
            final String phoneNumberID,
            final Message body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Phone-Number-ID}/messages");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Phone-Number-ID",
                new SimpleEntry<Object, Boolean>(phoneNumberID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for sendMessage.
     * @return An object of type SendMessageResponse
     */
    private SendMessageResponse handleSendMessageResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SendMessageResponse result = ApiHelper.deserialize(responseBody,
                SendMessageResponse.class);

        return result;
    }

    /**
     * When you receive an incoming message from Webhooks, you could use messages endpoint to change
     * the status of it to read. We recommend marking incoming messages as read within 30 days of
     * receipt. **Note**: You cannot mark outgoing messages you sent as read. You need to obtain the
     * **`message_id`** of the incoming message from Webhooks.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the SuccessResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SuccessResponse markMessageAsRead(
            final String phoneNumberID,
            final MarkMessageAsReadRequest body) throws ApiException, IOException {
        HttpRequest request = buildMarkMessageAsReadRequest(phoneNumberID, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleMarkMessageAsReadResponse(context);
    }

    /**
     * When you receive an incoming message from Webhooks, you could use messages endpoint to change
     * the status of it to read. We recommend marking incoming messages as read within 30 days of
     * receipt. **Note**: You cannot mark outgoing messages you sent as read. You need to obtain the
     * **`message_id`** of the incoming message from Webhooks.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the SuccessResponse response from the API call
     */
    public CompletableFuture<SuccessResponse> markMessageAsReadAsync(
            final String phoneNumberID,
            final MarkMessageAsReadRequest body) {
        return makeHttpCallAsync(() -> buildMarkMessageAsReadRequest(phoneNumberID, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleMarkMessageAsReadResponse(context));
    }

    /**
     * Builds the HttpRequest object for markMessageAsRead.
     */
    private HttpRequest buildMarkMessageAsReadRequest(
            final String phoneNumberID,
            final MarkMessageAsReadRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Phone-Number-ID}/messages");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Phone-Number-ID",
                new SimpleEntry<Object, Boolean>(phoneNumberID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().putBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for markMessageAsRead.
     * @return An object of type SuccessResponse
     */
    private SuccessResponse handleMarkMessageAsReadResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SuccessResponse result = ApiHelper.deserialize(responseBody,
                SuccessResponse.class);

        return result;
    }

}