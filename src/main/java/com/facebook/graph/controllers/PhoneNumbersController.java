/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.facebook.graph.controllers;

import com.facebook.graph.ApiHelper;
import com.facebook.graph.AuthManager;
import com.facebook.graph.Configuration;
import com.facebook.graph.exceptions.ApiException;
import com.facebook.graph.http.Headers;
import com.facebook.graph.http.client.HttpClient;
import com.facebook.graph.http.client.HttpContext;
import com.facebook.graph.http.request.HttpRequest;
import com.facebook.graph.http.response.HttpResponse;
import com.facebook.graph.http.response.HttpStringResponse;
import com.facebook.graph.models.GetPhoneNumberByIDResponse;
import com.facebook.graph.models.RequestVerificationCodeMethodEnum;
import com.facebook.graph.models.SuccessResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PhoneNumbersController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public PhoneNumbersController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * When you query all the phone numbers for a WhatsApp Business Account, each phone number has
     * an id. You can directly query for a phone number using this id.
     * @param  phoneNumberID  Required parameter: Example:
     * @return    Returns the GetPhoneNumberByIDResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetPhoneNumberByIDResponse getPhoneNumberByID(
            final String phoneNumberID) throws ApiException, IOException {
        HttpRequest request = buildGetPhoneNumberByIDRequest(phoneNumberID);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetPhoneNumberByIDResponse(context);
    }

    /**
     * When you query all the phone numbers for a WhatsApp Business Account, each phone number has
     * an id. You can directly query for a phone number using this id.
     * @param  phoneNumberID  Required parameter: Example:
     * @return    Returns the GetPhoneNumberByIDResponse response from the API call
     */
    public CompletableFuture<GetPhoneNumberByIDResponse> getPhoneNumberByIDAsync(
            final String phoneNumberID) {
        return makeHttpCallAsync(() -> buildGetPhoneNumberByIDRequest(phoneNumberID),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetPhoneNumberByIDResponse(context));
    }

    /**
     * Builds the HttpRequest object for getPhoneNumberByID.
     */
    private HttpRequest buildGetPhoneNumberByIDRequest(
            final String phoneNumberID) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Phone-Number-ID}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Phone-Number-ID",
                new SimpleEntry<Object, Boolean>(phoneNumberID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for getPhoneNumberByID.
     * @return An object of type GetPhoneNumberByIDResponse
     */
    private GetPhoneNumberByIDResponse handleGetPhoneNumberByIDResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        GetPhoneNumberByIDResponse result = ApiHelper.deserialize(responseBody,
                GetPhoneNumberByIDResponse.class);

        return result;
    }

    /**
     * Used to request a code to verify a phone number's ownership. You need to verify the phone
     * number you want to use to send messages to your customers. Phone numbers must be verified
     * through SMS/voice call. The verification process can be done through the Graph API calls
     * specified below.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  codeMethod  Required parameter: Chosen method for verification.
     * @param  locale  Required parameter: Your locale. For example: "en_US".
     * @return    Returns the SuccessResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SuccessResponse requestVerificationCode(
            final String phoneNumberID,
            final RequestVerificationCodeMethodEnum codeMethod,
            final String locale) throws ApiException, IOException {
        HttpRequest request = buildRequestVerificationCodeRequest(phoneNumberID, codeMethod,
                locale);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRequestVerificationCodeResponse(context);
    }

    /**
     * Used to request a code to verify a phone number's ownership. You need to verify the phone
     * number you want to use to send messages to your customers. Phone numbers must be verified
     * through SMS/voice call. The verification process can be done through the Graph API calls
     * specified below.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  codeMethod  Required parameter: Chosen method for verification.
     * @param  locale  Required parameter: Your locale. For example: "en_US".
     * @return    Returns the SuccessResponse response from the API call
     */
    public CompletableFuture<SuccessResponse> requestVerificationCodeAsync(
            final String phoneNumberID,
            final RequestVerificationCodeMethodEnum codeMethod,
            final String locale) {
        return makeHttpCallAsync(() -> buildRequestVerificationCodeRequest(phoneNumberID,
                codeMethod, locale),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleRequestVerificationCodeResponse(context));
    }

    /**
     * Builds the HttpRequest object for requestVerificationCode.
     */
    private HttpRequest buildRequestVerificationCodeRequest(
            final String phoneNumberID,
            final RequestVerificationCodeMethodEnum codeMethod,
            final String locale) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Phone-Number-ID}/request_code");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Phone-Number-ID",
                new SimpleEntry<Object, Boolean>(phoneNumberID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("code_method",
                (codeMethod != null) ? codeMethod.value() : null);
        formParameters.put("locale", locale);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        return request;
    }

    /**
     * Processes the response for requestVerificationCode.
     * @return An object of type SuccessResponse
     */
    private SuccessResponse handleRequestVerificationCodeResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SuccessResponse result = ApiHelper.deserialize(responseBody,
                SuccessResponse.class);

        return result;
    }

    /**
     * Used to verify a phone number's ownership. After you have received a SMS or Voice request
     * code for verification, you need to verify the code that was sent to you.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  code  Required parameter: The code you received after calling
     *         FROM_PHONE_NUMBER_ID/request_code.
     * @return    Returns the SuccessResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SuccessResponse verifyCode(
            final String phoneNumberID,
            final String code) throws ApiException, IOException {
        HttpRequest request = buildVerifyCodeRequest(phoneNumberID, code);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleVerifyCodeResponse(context);
    }

    /**
     * Used to verify a phone number's ownership. After you have received a SMS or Voice request
     * code for verification, you need to verify the code that was sent to you.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  code  Required parameter: The code you received after calling
     *         FROM_PHONE_NUMBER_ID/request_code.
     * @return    Returns the SuccessResponse response from the API call
     */
    public CompletableFuture<SuccessResponse> verifyCodeAsync(
            final String phoneNumberID,
            final String code) {
        return makeHttpCallAsync(() -> buildVerifyCodeRequest(phoneNumberID, code),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleVerifyCodeResponse(context));
    }

    /**
     * Builds the HttpRequest object for verifyCode.
     */
    private HttpRequest buildVerifyCodeRequest(
            final String phoneNumberID,
            final String code) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Phone-Number-ID}/verify_code");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Phone-Number-ID",
                new SimpleEntry<Object, Boolean>(phoneNumberID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("code", code);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        return request;
    }

    /**
     * Processes the response for verifyCode.
     * @return An object of type SuccessResponse
     */
    private SuccessResponse handleVerifyCodeResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SuccessResponse result = ApiHelper.deserialize(responseBody,
                SuccessResponse.class);

        return result;
    }

}