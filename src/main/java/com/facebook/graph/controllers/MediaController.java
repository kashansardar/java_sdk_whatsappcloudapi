/*
 * WhatsAppCloudAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.facebook.graph.controllers;

import com.facebook.graph.ApiHelper;
import com.facebook.graph.AuthManager;
import com.facebook.graph.Configuration;
import com.facebook.graph.exceptions.ApiException;
import com.facebook.graph.http.Headers;
import com.facebook.graph.http.client.HttpClient;
import com.facebook.graph.http.client.HttpContext;
import com.facebook.graph.http.request.HttpRequest;
import com.facebook.graph.http.response.HttpResponse;
import com.facebook.graph.http.response.HttpStringResponse;
import com.facebook.graph.models.RetrieveMediaURLResponse;
import com.facebook.graph.models.SuccessResponse;
import com.facebook.graph.models.UploadMedia;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class MediaController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public MediaController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Used to upload media. All media files sent through this endpoint are encrypted and persist
     * for 30 days.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  messagingProduct  Required parameter: Messaging service used for the request. In this
     *         case, use whatsapp.
     * @param  file  Required parameter: Path to the file stored in your local directory. For
     *         example: "@/local/path/file.jpg".
     * @param  type  Required parameter: Type of media file being uploaded. See Supported Media
     *         Types for more information. Supported options for images are: `image/jpeg`,
     *         `image/png` Supported options for documents are: `text/plain`, `application/pdf`,
     *         `application/vnd.ms-powerpoint`, `application/msword`, `application/vnd.ms-excel`,
     *         `application/vnd.openxmlformats-officedocument.wordprocessingml.document`,
     *         `application/vnd.openxmlformats-officedocument.presentationml.presentation`,
     *         `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` Supported options
     *         for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`, `audio/amr`, `audio/ogg`,
     *         `audio/opus` Supported options for video are: `video/mp4`, `video/3gp` Supported
     *         options for stickers are: `image/webp`
     * @return    Returns the UploadMedia response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UploadMedia uploadMedia(
            final String phoneNumberID,
            final String messagingProduct,
            final String file,
            final String type) throws ApiException, IOException {
        HttpRequest request = buildUploadMediaRequest(phoneNumberID, messagingProduct, file, type);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUploadMediaResponse(context);
    }

    /**
     * Used to upload media. All media files sent through this endpoint are encrypted and persist
     * for 30 days.
     * @param  phoneNumberID  Required parameter: Example:
     * @param  messagingProduct  Required parameter: Messaging service used for the request. In this
     *         case, use whatsapp.
     * @param  file  Required parameter: Path to the file stored in your local directory. For
     *         example: "@/local/path/file.jpg".
     * @param  type  Required parameter: Type of media file being uploaded. See Supported Media
     *         Types for more information. Supported options for images are: `image/jpeg`,
     *         `image/png` Supported options for documents are: `text/plain`, `application/pdf`,
     *         `application/vnd.ms-powerpoint`, `application/msword`, `application/vnd.ms-excel`,
     *         `application/vnd.openxmlformats-officedocument.wordprocessingml.document`,
     *         `application/vnd.openxmlformats-officedocument.presentationml.presentation`,
     *         `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` Supported options
     *         for audio are: `audio/aac`, `audio/mp4`, `audio/mpeg`, `audio/amr`, `audio/ogg`,
     *         `audio/opus` Supported options for video are: `video/mp4`, `video/3gp` Supported
     *         options for stickers are: `image/webp`
     * @return    Returns the UploadMedia response from the API call
     */
    public CompletableFuture<UploadMedia> uploadMediaAsync(
            final String phoneNumberID,
            final String messagingProduct,
            final String file,
            final String type) {
        return makeHttpCallAsync(() -> buildUploadMediaRequest(phoneNumberID, messagingProduct,
                file, type),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleUploadMediaResponse(context));
    }

    /**
     * Builds the HttpRequest object for uploadMedia.
     */
    private HttpRequest buildUploadMediaRequest(
            final String phoneNumberID,
            final String messagingProduct,
            final String file,
            final String type) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Phone-Number-ID}/media");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Phone-Number-ID",
                new SimpleEntry<Object, Boolean>(phoneNumberID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //load all fields for the outgoing API request
        Map<String, Object> formParameters = new HashMap<>();
        formParameters.put("messaging_product", messagingProduct);
        formParameters.put("file", file);
        formParameters.put("type", type);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null,
                ApiHelper.prepareFormFields(formParameters));

        return request;
    }

    /**
     * Processes the response for uploadMedia.
     * @return An object of type UploadMedia
     */
    private UploadMedia handleUploadMediaResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        UploadMedia result = ApiHelper.deserialize(responseBody,
                UploadMedia.class);

        return result;
    }

    /**
     * To retrieve your media’s URL, make a request to this endpoint. Later, you can use this URL to
     * download the media file.
     * @param  mediaID  Required parameter: Media object ID from either uploading media endpoint or
     *         media message Webhooks
     * @return    Returns the RetrieveMediaURLResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public RetrieveMediaURLResponse retrieveMediaURL(
            final String mediaID) throws ApiException, IOException {
        HttpRequest request = buildRetrieveMediaURLRequest(mediaID);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRetrieveMediaURLResponse(context);
    }

    /**
     * To retrieve your media’s URL, make a request to this endpoint. Later, you can use this URL to
     * download the media file.
     * @param  mediaID  Required parameter: Media object ID from either uploading media endpoint or
     *         media message Webhooks
     * @return    Returns the RetrieveMediaURLResponse response from the API call
     */
    public CompletableFuture<RetrieveMediaURLResponse> retrieveMediaURLAsync(
            final String mediaID) {
        return makeHttpCallAsync(() -> buildRetrieveMediaURLRequest(mediaID),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleRetrieveMediaURLResponse(context));
    }

    /**
     * Builds the HttpRequest object for retrieveMediaURL.
     */
    private HttpRequest buildRetrieveMediaURLRequest(
            final String mediaID) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Media-ID}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Media-ID",
                new SimpleEntry<Object, Boolean>(mediaID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for retrieveMediaURL.
     * @return An object of type RetrieveMediaURLResponse
     */
    private RetrieveMediaURLResponse handleRetrieveMediaURLResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        RetrieveMediaURLResponse result = ApiHelper.deserialize(responseBody,
                RetrieveMediaURLResponse.class);

        return result;
    }

    /**
     * This endpoint can be used for deleting a media object.
     * @param  mediaID  Required parameter: Media object ID from either uploading media endpoint or
     *         media message Webhooks
     * @return    Returns the SuccessResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SuccessResponse deleteMedia(
            final String mediaID) throws ApiException, IOException {
        HttpRequest request = buildDeleteMediaRequest(mediaID);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteMediaResponse(context);
    }

    /**
     * This endpoint can be used for deleting a media object.
     * @param  mediaID  Required parameter: Media object ID from either uploading media endpoint or
     *         media message Webhooks
     * @return    Returns the SuccessResponse response from the API call
     */
    public CompletableFuture<SuccessResponse> deleteMediaAsync(
            final String mediaID) {
        return makeHttpCallAsync(() -> buildDeleteMediaRequest(mediaID),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleDeleteMediaResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteMedia.
     */
    private HttpRequest buildDeleteMediaRequest(
            final String mediaID) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/{Media-ID}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Media-ID",
                new SimpleEntry<Object, Boolean>(mediaID, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteMedia.
     * @return An object of type SuccessResponse
     */
    private SuccessResponse handleDeleteMediaResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        SuccessResponse result = ApiHelper.deserialize(responseBody,
                SuccessResponse.class);

        return result;
    }

}